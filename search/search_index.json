{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Divinity Divinity is a custom timeseries forecast library. This is currently in development and designed to automate and generalise (as much as possible) the process of generating any timeseries forecast. This is an RnD project aiming to start simply and build additional functionality as needed. Please see the issues and project page for a backlog of functionality to be added to the package. Installation pip install divinity Documentation Please see the demo Jupyter Notebook for example usage.","title":"Home"},{"location":"#divinity","text":"Divinity is a custom timeseries forecast library. This is currently in development and designed to automate and generalise (as much as possible) the process of generating any timeseries forecast. This is an RnD project aiming to start simply and build additional functionality as needed. Please see the issues and project page for a backlog of functionality to be added to the package.","title":"Divinity"},{"location":"#installation","text":"pip install divinity","title":"Installation"},{"location":"#documentation","text":"Please see the demo Jupyter Notebook for example usage.","title":"Documentation"},{"location":"config/","text":"Config","title":"Config"},{"location":"config/#config","text":"","title":"Config"},{"location":"divinity/divinity/","text":"divinity divinity(self, *args, **kargs) fit divinity.fit(y) combine the above steps into a general fit function :param X: :param y: :return: predict divinity.predict() return the foreward forecast for Nsteps specified by the forecast_length input argument. :return: forecast divinity.forecast(steps) extend the forecast (must already have used .fit) :return:","title":"Divinity"},{"location":"endpoints/about-endpoints/","text":"About Endpoints The endpoints module allows you to use some cool functions. The 4 main classes are : cool class 1 cool class 2 3 4 Each class offers either one, or both, of two different functionalities: Something cool 1 . do 1 Something cool 2 . do 2 SELECT * FROM table2 WHERE name ~* 'name1' AND option2 = 'cat2'; Let's explain with some examples: Example 1 from coolmodule import cool_class_1 df = cool_class_1().something_cool_1().to_df()","title":"About Divinity"},{"location":"endpoints/about-endpoints/#about-endpoints","text":"The endpoints module allows you to use some cool functions. The 4 main classes are : cool class 1 cool class 2 3 4 Each class offers either one, or both, of two different functionalities: Something cool 1 . do 1 Something cool 2 . do 2 SELECT * FROM table2 WHERE name ~* 'name1' AND option2 = 'cat2'; Let's explain with some examples: Example 1 from coolmodule import cool_class_1 df = cool_class_1().something_cool_1().to_df()","title":"About Endpoints"},{"location":"examples/example1/","text":"Let's do something here ```python","title":"Example 1"}]}